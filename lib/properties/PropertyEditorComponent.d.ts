import React, { ReactNode } from "react";
import { Column, DataSource, Expr, Schema, Variable } from "mwater-expressions";
export interface Property extends Column {
    table?: string;
    contents?: Property[];
    /** Conditional property display */
    conditionExpr?: Expr;
    /** True if property is unique code that is autogenerated */
    uniqueCode?: boolean;
    /** True to index property */
    indexed?: boolean;
    /** True if property must be unique */
    unique?: boolean;
    /** For id type only: action when the row that is referenced is deleted.
     * Default is to do nothing, leaving an invalid reference.
     *
     * "restrict" will prevent deletion of the row that is referenced at the database level
     * "cascade" will delete the row at the database level with no archives
     */
    onDelete?: "cascade" | "restrict";
    /** Roles on property. User-defined */
    roles?: any[];
    sql?: string;
    reverseSql?: string;
}
export interface PropertyEditorComponentProps {
    /** The property being edited */
    property: Property;
    /** Function called when anything is changed in the editor */
    onChange: (property: Property) => void;
    /** Features to be enabled apart from the default features */
    features?: string[];
    /** schema of all data */
    schema?: Schema;
    /** data source */
    dataSource?: DataSource;
    /** Table that properties are of. Not required if table feature is on */
    table?: string;
    /** Ids of tables to include when using table feature */
    tableIds?: string[];
    createRoleEditElem?: (roles: any[] | undefined, onRolesChange: (roles: any[]) => void) => ReactNode;
    /** Ids of properties that are not allowed as would be duplicates */
    forbiddenPropertyIds?: string[];
    /** Variables that may be used in expressions */
    variables?: Variable[];
}
export default class PropertyEditorComponent extends React.Component<PropertyEditorComponentProps> {
    static defaultProps: {
        features: never[];
    };
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
